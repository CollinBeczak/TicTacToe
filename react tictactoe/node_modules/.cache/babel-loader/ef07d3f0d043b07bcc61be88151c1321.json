{"ast":null,"code":"var _jsxFileName = \"/Users/collinbeczak/Documents/projects/tictactoe/src/components/Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Cell from './Cell';\nimport Result from './Result';\nimport { XScore, OScore } from './Score.js';\nimport './Table.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = () => {\n  _s();\n\n  const [turn, setTurn] = useState('O');\n  const [cells, setCells] = useState(Array(9).fill(''));\n  const [results, setResults] = useState('');\n\n  const restartGame = () => {\n    if (turn === 'X') {\n      setTurn('O');\n    } else {\n      setTurn('X');\n    }\n\n    setResults('');\n    setCells(Array(9).fill(''));\n  };\n\n  const cellFormat = id => {\n    return /*#__PURE__*/_jsxDEV(Cell, {\n      id: id,\n      cells: cells,\n      results: results,\n      setCells: setCells,\n      turn: turn,\n      setTurn: setTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  };\n\n  const buttonText = () => {\n    if (results !== '') {\n      return \"Play Again\";\n    } else {\n      return \"Reset\";\n    }\n  };\n\n  const buttonColor = () => {\n    if (results !== '') {\n      return \"green\";\n    } else {\n      return \"red\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"turnShow\",\n        children: [\"Turn: \", turn, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreShow\",\n      children: \"Score: X=0 | O=0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [cellFormat(0), cellFormat(1), cellFormat(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [cellFormat(3), cellFormat(4), cellFormat(5)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [cellFormat(6), cellFormat(7), cellFormat(8)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      cells: cells,\n      results: results,\n      setResults: setResults\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: buttonColor(),\n      onClick: () => restartGame(),\n      children: buttonText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Table, \"hddxDSHWQcR1lIYj72q5N/+ZF48=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/collinbeczak/Documents/projects/tictactoe/src/components/Table.js"],"names":["React","useState","Cell","Result","XScore","OScore","Table","turn","setTurn","cells","setCells","Array","fill","results","setResults","restartGame","cellFormat","id","buttonText","buttonColor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Cell from './Cell'\nimport Result from './Result';\nimport { XScore, OScore } from './Score.js'\nimport './Table.css';\n\nconst Table = () => {\n    const [turn, setTurn] = useState('O');\n    const [cells, setCells] = useState(Array(9).fill(''));\n    const [results, setResults] = useState('');\n\n    const restartGame = () => {\n        if (turn === 'X'){\n            setTurn('O')\n        } else {\n            setTurn('X')\n        }\n        setResults('');\n        setCells(Array(9).fill(''));\n    }\n\n    const cellFormat = (id) => {\n        return <Cell id={id} cells={cells} results={results} setCells={setCells} turn={turn} setTurn={setTurn} />\n    }\n\n    const buttonText = () => {\n        if (results !== '') {\n            return \"Play Again\";\n        } else {\n            return \"Reset\";\n        }\n    }\n\n    const buttonColor = () => {\n        if (results !== '') {\n            return \"green\";\n        } else {\n            return \"red\";\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <div><span className=\"turnShow\">Turn: {turn}!</span></div>\n            <div className=\"scoreShow\">Score: X=0 | O=0</div>\n            <table className=\"table\">\n                <tbody>\n                    <tr>\n                        {cellFormat(0)}\n                        {cellFormat(1)}\n                        {cellFormat(2)}\n                    </tr>\n                    <tr>\n                        {cellFormat(3)}\n                        {cellFormat(4)}\n                        {cellFormat(5)}\n                    </tr>\n                    <tr>\n                        {cellFormat(6)}\n                        {cellFormat(7)} \n                        {cellFormat(8)}\n                    </tr>\n                </tbody>\n            </table>\n            <Result cells={cells} results={results} setResults={setResults}></Result>\n            <button className={buttonColor()} onClick={() => restartGame()}>{buttonText()}</button>\n        </div>\n    );\n}\n\nexport default Table;"]},"metadata":{},"sourceType":"module"}